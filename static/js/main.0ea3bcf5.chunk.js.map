{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Component","citylist","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","e","setState","query","target","value","suggestions","length","options","state","filteredCity","map","r","key","toString","className","text","currentTarget","getFilteredCityForText","name","filter","id","toLowerCase","includes","onSubmit","input_submit","placeholder","onInput","filterCity","bind","onChange","changeinput","required","type","Weather","object","console","log","iconurlnow","list","weather","icon","time","dt_txt","location","city","main","description","temperature","temp","toFixed","iconurlnow2","time2","main2","description2","temperature2","src","alt","api_key","App","preventDefault","name_city","handleSubmit","axios","get","concat","then","res","wheather_object","data","wheather_array","catch","error","components_Title","components_Form","components_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ea3bcf5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport title from '../style/title.scss';\r\n\r\n\r\nclass Title extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n      <h1>Weather app</h1>\r\n      <p>Check the weather for any place in the world! </p>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport name from '../city.list.json'; \r\nimport title from '../style/form.scss';\r\nconst citylist = [];\r\n\r\nclass Form extends Component {\r\nconstructor(props){\r\n  super(props);\r\n\r\n  this.state = {\r\n    query: '',\r\n    filteredCity: citylist\r\n  }\r\n\r\n  \r\n}\r\nhandleInputChange = (e) => {\r\n  this.setState({\r\n    query: e.target.value\r\n  })\r\n}\r\nfilterCity(e) {\r\n  const text = e.currentTarget.value;\r\n  const filteredCity = this.getFilteredCityForText(text);\r\n  this.setState({\r\n    filteredCity \r\n  })\r\n}\r\n\r\ngetFilteredCityForText(name) {\r\n  return citylist.filter(id => id.toLowerCase().includes(name.toLowerCase()))\r\n}\r\n\r\n\r\n\r\nsuggestions = () => {\r\n\r\n  \r\n  \r\n \r\n  if(citylist.length!=0){\r\n   \r\n    \r\n      const options = this.state.filteredCity.map(r => (\r\n        <li key={r.toString()}>\r\n          {r}\r\n        </li>\r\n        \r\n      ))\r\n      if(options.length<15){\r\n        return <ul className=\"ul_list\">{options}</ul>\r\n      }\r\n      else{\r\n        return <ul ></ul>;\r\n      }\r\n      \r\n      \r\n    \r\n  }else{\r\n    return <ul></ul>;\r\n  }\r\n  \r\n    \r\n  \r\n \r\n}\r\ncomponentDidMount(){\r\n\r\n  /*let promise1= new Promise(function(){\r\n    for (let index = 0; index < name.length; index++) {\r\n      if(name[index].country=='PL'){\r\n        const element = name[index].name;\r\n        let logiczna=true;  // domyslnie true nie powtorzylo sie\r\n        citylist.forEach(temp => {\r\n          if(element==temp){\r\n            logiczna=false;//powtorzylo sie\r\n          }\r\n          else{\r\n\r\n          }\r\n  \r\n});\r\n        if(logiczna===true){\r\n          citylist.push(element);\r\n        }\r\n        \r\n        \r\n        \r\n      }\r\n      else{\r\n        \r\n      }\r\n     \r\n      \r\n    }\r\n\r\n  });*/\r\n\r\n\r\n}\r\n\r\n  render() {\r\n\r\n  \r\n\r\n  \r\n\r\n    return (\r\n     \r\n       <form className=\"form\"  onSubmit={this.props.input_submit}>\r\n     \r\n      <div>\r\n         <input\r\n        className=\"search\"\r\n         placeholder=\"Search for...\"\r\n       onInput={this.filterCity.bind(this)}\r\n        onChange={this.props.changeinput}\r\n        required\r\n        \r\n       />\r\n       <input className=\"button\" type=\"submit\" value=\"Get Weather\"/>\r\n     \r\n       </div>\r\n       <this.suggestions/>\r\n\r\n       </form>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport weather from '../style/weather.scss';\r\n\r\nclass Weather extends Component {\r\nconstructor(props){\r\n  super(props);\r\n\r\n}\r\n\r\n\r\n\r\n  render() {\r\n     \r\n   \r\n    if(this.props.object===''){\r\n      return (\r\n        <section>\r\n        \r\n\r\n\r\n        </section>\r\n      );\r\n    }\r\n    else{\r\nconsole.log(this.props.object);\r\n    \r\n     \r\n     \r\n\r\n\r\n        const icon=this.props.object.list[0].weather[0].icon;\r\n        const iconurlnow = \"http://openweathermap.org/img/w/\" + icon + \".png\";\r\n        const time=this.props.object.list[0].dt_txt;\r\n        const location=this.props.object.city.name;\r\n        const main=this.props.object.list[0].weather[0].main;\r\n        const description=this.props.object.list[0].weather[0].description;\r\n        let temperature=this.props.object.list[0].main.temp-272.15;\r\n        temperature=temperature.toFixed(2);\r\n        \r\n\r\n\r\n        const icon2=this.props.object.list[1].weather[0].icon;\r\n        const iconurlnow2 = \"http://openweathermap.org/img/w/\" + icon2 + \".png\";\r\n        const time2=this.props.object.list[1].dt_txt;\r\n        \r\n        const main2=this.props.object.list[1].weather[0].main;\r\n        const description2=this.props.object.list[1].weather[0].description;\r\n        let temperature2=this.props.object.list[1].main.temp-272.15;\r\n        temperature2=temperature2.toFixed(2);\r\n\r\n\r\n      return (\r\n        <section className=\"wheather_section\">\r\n                <div className=\"wheather\">\r\n                <p className=\"wheather_location\"> <h2>Location:</h2>  <span>{location}</span>  </p>\r\n                <p> <span>Weather last update <span>{time}</span>:</span>  <span>{main}</span>  : <span>{description}</span> </p>\r\n                <div className=\"wheather_icon\"><img src={iconurlnow} alt=\"icon weather\"/>  <span>Current temperature : {temperature} &#8451; </span>    </div>\r\n                </div>\r\n\r\n                  <div className=\"wheather\">\r\n                    <h2>Next hours</h2>\r\n                    <p> <span>Weather next update <span>{time2}</span>:</span>  <span>{main2}</span>  : <span>{description2}</span> </p>\r\n                <div className=\"wheather_icon\"><img src={iconurlnow2} alt=\"icon weather\"/>  <span>Predicted temperature : {temperature2} &#8451; </span>    </div>\r\n\r\n                  </div>\r\n        </section>\r\n      );\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\nimport Title from './components/Title';\r\nimport Form from './components/Form';\r\nimport Weather from './components/Weather';\r\nimport axios from 'axios';\r\nimport main from './style/main.scss'\r\n\r\nconst api_key='10d35fcce7c02936d78262262d8ebda4';\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\nthis.state={\r\n  wheather_array : [],\r\n  name_city : '',\r\n  wheather_object : '',\r\n\r\n}\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\nhandleInputChange = (e) => {\r\n  e.preventDefault();\r\n  this.setState({\r\n    name_city : e.target.value,\r\n  })\r\n\r\n}\r\n\r\nhandleSubmit= (e) =>{\r\n  e.preventDefault();\r\n  const name=this.state.name_city;\r\n  \r\n  \r\n  axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=${name}&APPID=${api_key}`)\r\n    .then(res => {\r\n     \r\n      const wheather_object = res.data;\r\n     \r\n      this.setState({\r\n        wheather_array : wheather_object.list,\r\n        wheather_object\r\n      })\r\n\r\n    }).catch(error=> {\r\n      \r\n      console.log(error);\r\n    })\r\n  \r\n}\r\n \r\n  render() {\r\n\r\n    \r\n\r\n    return (\r\n      <main className=\"App\">\r\n        <Title/>\r\n        <Form  changeinput={this.handleInputChange} input_submit={this.handleSubmit }   />\r\n        <Weather object={this.state.wheather_object} />\r\n\r\n\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}